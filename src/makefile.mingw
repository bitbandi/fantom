# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

USE_UPNP:=1
USE_WALLET:=1
USE_NATIVE_I2P:=1

INCLUDEPATHS= \
 -I"C:\Develop\deps\boost_1_59_0" \
 -I"C:\Develop\deps\db-4.8.30.NC\build_unix" \
 -I"C:\Develop\deps\openssl-1.0.2d\include" \
 -I"C:\Develop\deps\secp256k1-fantom\include" \
 -I"$(abspath obj)"

LIBPATHS= \
 -L"C:\Develop\deps\boost_1_59_0\bin.v2\libs" \
 -L"C:\Develop\deps\db-4.8.30.NC\build_unix" \
 -L"C:\Develop\deps\openssl-1.0.2d\lib" \
 -L"C:\Develop\deps\secp256k1-fantom\.libs"

LIBS= \
 -l boost_system-mgw49-mt-s-1_59 \
 -l boost_filesystem-mgw49-mt-s-1_59 \
 -l boost_program_options-mgw49-mt-s-1_59 \
 -l boost_thread-mgw49-mt-s-1_59 \
 -l boost_chrono-mgw49-mt-s-1_59 \
 -l db_cxx \
 -l ssl \
 -l crypto \
 -l secp256k1 \
 -l z

DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE
DEBUGFLAGS=-g
CFLAGS=-O3 -msse2 -w -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)
LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat -static -static-libgcc -static-libstdc++

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
  INCLUDEPATHS += -I"C:\Develop\deps\miniupnpc-1.9\include"
  LIBPATHS += -L"C:\Develop\deps\miniupnpc-1.9\lib"
  LIBS += -l miniupnpc -l iphlpapi
  DEFS += -DMINIUPNP_STATICLIB -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)
endif

LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi

# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)

OBJS= \
    obj/alert.o \
    obj/cleanse.o \
    obj/base58.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/eckey.o \
    obj/init.o \
    obj/fantomd.o \
    obj/keystore.o \
    obj/core.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/rpcclient.o \
    obj/rpcprotocol.o \
    obj/rpcserver.o \
    obj/rpcmisc.o \
    obj/rpcnet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/rpcsmessage.o \
    obj/timedata.o \
    obj/script.o \
    obj/sync.o \
    obj/txmempool.o \
    obj/util.o \
    obj/hash.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-arm.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/chainparams.o \
    obj/stealth.o \
    obj/activeblanknode.o \
    obj/zerosend.o \
    obj/zerosend-relay.o \
    obj/eccryptoverify.o \
    obj/instantx.o \
    obj/blanknodeconfig.o \
    obj/blanknodeman.o \
    obj/blanknode.o \
    obj/blanknode-pos.o \
    obj/rpczerosend.o \
    obj/spork.o \
    obj/crypto/hmac_sha256.o \
    obj/crypto/hmac_sha512.o \
    obj/crypto/rfc6979_hmac_sha256.o \
    obj/crypto/ripemd160.o \
    obj/crypto/sha1.o \
    obj/crypto/sha256.o \
    obj/crypto/sha512.o \
    obj/smessage.o \
    obj/market.o \
    obj/rpcmarket.o

ifeq (${USE_WALLET}, 1)
    DEFS += -DENABLE_WALLET
    OBJS += \
        obj/db.o \
        obj/miner.o \
        obj/rpcdump.o \
        obj/rpcmining.o \
        obj/rpcwallet.o \
        obj/wallet.o \
        obj/walletdb.o
endif

all: fantomd.exe

LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..." && cd leveldb TARGET_OS=NATIVE_WINDOWS make libleveldb.a libmemenv.a cd ..
obj/txdb-leveldb.o: leveldb/libleveldb.a

# libsecp256k1 support 
DEFS += -DUSE_SECP256K1  
$(shell cp -rp $(abspath crypto) obj >/dev/null)

obj/build.h: FORCE
	sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/%.o: %.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -o $@ $<

fantomd.exe: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) -lshlwapi
	strip fantomd.exe

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-arm.o: scrypt-arm.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<
clean:
	-rm -f obj/*.o
	-rm -f fantomd.exe
	-rm -f obj/build.h
	cd leveldb && TARGET_OS=NATIVE_WINDOWS $(MAKE) clean && cd ..

FORCE:
